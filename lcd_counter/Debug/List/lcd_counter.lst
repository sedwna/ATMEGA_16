
AVRASM ver. 2.1.30  C:\Users\priso\OneDrive\Desktop\lcd_counter\Debug\List\lcd_counter.asm Tue Apr 30 15:53:06 2024

C:\Users\priso\OneDrive\Desktop\lcd_counter\Debug\List\lcd_counter.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\priso\OneDrive\Desktop\lcd_counter\Debug\List\lcd_counter.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\priso\OneDrive\Desktop\lcd_counter\Debug\List\lcd_counter.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6425
C:\Users\priso\OneDrive\Desktop\lcd_counter\Debug\List\lcd_counter.asm(1128): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x25,0x64,0x0
                 _0x2020060:
C:\Users\priso\OneDrive\Desktop\lcd_counter\Debug\List\lcd_counter.asm(1130): warning: .cseg .db misalignment - padding zero byte
000035 0001      	.DB  0x1
                 _0x2020000:
000036 4e2d
000037 4e41
000038 4900
000039 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\priso\OneDrive\Desktop\lcd_counter\Debug\List\lcd_counter.asm(1133): warning: .cseg .db misalignment - padding zero byte
00003a 0000      	.DB  0x0
                 _0x2040003:
00003b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003c 0001      	.DW  0x01
00003d 0160      	.DW  __seed_G101
00003e 006a      	.DW  _0x2020060*2
                 
00003f 0002      	.DW  0x02
000040 0164      	.DW  __base_y_G102
000041 0076      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bffb      	OUT  GICR,R31
000048 bfeb      	OUT  GICR,R30
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e7e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 0088 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 30/04/2024
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 1.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;void clear_str(char str[16])
                 ; 0000 0022 {
                 
                 	.CSEG
                 _clear_str:
                 ; .FSTART _clear_str
                 ; 0000 0023       int i = 0;
                 ; 0000 0024       for (; i < 16; i++)
000070 93ba      	ST   -Y,R27
000071 93aa      	ST   -Y,R26
000072 931a      	ST   -Y,R17
000073 930a      	ST   -Y,R16
                 ;	str -> Y+2
                 ;	i -> R16,R17
                +
000074 e000     +LDI R16 , LOW ( 0 )
000075 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
                +
000076 3100     +CPI R16 , LOW ( 16 )
000077 e0e0     +LDI R30 , HIGH ( 16 )
000078 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
000079 f454      	BRGE _0x5
                 ; 0000 0025       {
                 ; 0000 0026             str[i] = 'k';
00007a 01f8      	MOVW R30,R16
00007b 81aa      	LDD  R26,Y+2
00007c 81bb      	LDD  R27,Y+2+1
00007d 0fae      	ADD  R26,R30
00007e 1fbf      	ADC  R27,R31
00007f e6eb      	LDI  R30,LOW(107)
000080 93ec      	ST   X,R30
                 ; 0000 0027       }
                +
000081 5f0f     +SUBI R16 , LOW ( - 1 )
000082 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000083 cff2      	RJMP _0x4
                 _0x5:
                 ; 0000 0028 }
000084 8119      	LDD  R17,Y+1
000085 8108      	LDD  R16,Y+0
000086 9624      	ADIW R28,4
000087 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 002A {
                 _main:
                 ; .FSTART _main
                 ; 0000 002B       // Declare your local variables here
                 ; 0000 002C       int number = 0;
                 ; 0000 002D       char str_number[16];
                 ; 0000 002E 
                 ; 0000 002F       // Input/Output Ports initialization
                 ; 0000 0030       // Port A initialization
                 ; 0000 0031       // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0032       DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA ...
000088 9760      	SBIW R28,16
                 ;	number -> R16,R17
                 ;	str_number -> Y+0
                +
000089 e000     +LDI R16 , LOW ( 0 )
00008a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00008b e0e0      	LDI  R30,LOW(0)
00008c bbea      	OUT  0x1A,R30
                 ; 0000 0033       // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0034       PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORT ...
00008d bbeb      	OUT  0x1B,R30
                 ; 0000 0035 
                 ; 0000 0036       // Port B initialization
                 ; 0000 0037       // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038       DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB ...
00008e bbe7      	OUT  0x17,R30
                 ; 0000 0039       // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A       PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORT ...
00008f bbe8      	OUT  0x18,R30
                 ; 0000 003B 
                 ; 0000 003C       // Port C initialization
                 ; 0000 003D       // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E       DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC ...
000090 bbe4      	OUT  0x14,R30
                 ; 0000 003F       // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040       PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORT ...
000091 bbe5      	OUT  0x15,R30
                 ; 0000 0041 
                 ; 0000 0042       // Port D initialization
                 ; 0000 0043       // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044       DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD ...
000092 bbe1      	OUT  0x11,R30
                 ; 0000 0045       // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0046       PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORT ...
000093 bbe2      	OUT  0x12,R30
                 ; 0000 0047 
                 ; 0000 0048       // Timer/Counter 0 initialization
                 ; 0000 0049       // Clock source: System Clock
                 ; 0000 004A       // Clock value: Timer 0 Stopped
                 ; 0000 004B       // Mode: Normal top=0xFF
                 ; 0000 004C       // OC0 output: Disconnected
                 ; 0000 004D       TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
000094 bfe3      	OUT  0x33,R30
                 ; 0000 004E       TCNT0 = 0x00;
000095 bfe2      	OUT  0x32,R30
                 ; 0000 004F       OCR0 = 0x00;
000096 bfec      	OUT  0x3C,R30
                 ; 0000 0050 
                 ; 0000 0051       // Timer/Counter 1 initialization
                 ; 0000 0052       // Clock source: System Clock
                 ; 0000 0053       // Clock value: Timer1 Stopped
                 ; 0000 0054       // Mode: Normal top=0xFFFF
                 ; 0000 0055       // OC1A output: Disconnected
                 ; 0000 0056       // OC1B output: Disconnected
                 ; 0000 0057       // Noise Canceler: Off
                 ; 0000 0058       // Input Capture on Falling Edge
                 ; 0000 0059       // Timer1 Overflow Interrupt: Off
                 ; 0000 005A       // Input Capture Interrupt: Off
                 ; 0000 005B       // Compare A Match Interrupt: Off
                 ; 0000 005C       // Compare B Match Interrupt: Off
                 ; 0000 005D       TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
000097 bdef      	OUT  0x2F,R30
                 ; 0000 005E       TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
000098 bdee      	OUT  0x2E,R30
                 ; 0000 005F       TCNT1H = 0x00;
000099 bded      	OUT  0x2D,R30
                 ; 0000 0060       TCNT1L = 0x00;
00009a bdec      	OUT  0x2C,R30
                 ; 0000 0061       ICR1H = 0x00;
00009b bde7      	OUT  0x27,R30
                 ; 0000 0062       ICR1L = 0x00;
00009c bde6      	OUT  0x26,R30
                 ; 0000 0063       OCR1AH = 0x00;
00009d bdeb      	OUT  0x2B,R30
                 ; 0000 0064       OCR1AL = 0x00;
00009e bdea      	OUT  0x2A,R30
                 ; 0000 0065       OCR1BH = 0x00;
00009f bde9      	OUT  0x29,R30
                 ; 0000 0066       OCR1BL = 0x00;
0000a0 bde8      	OUT  0x28,R30
                 ; 0000 0067 
                 ; 0000 0068       // Timer/Counter 2 initialization
                 ; 0000 0069       // Clock source: System Clock
                 ; 0000 006A       // Clock value: Timer2 Stopped
                 ; 0000 006B       // Mode: Normal top=0xFF
                 ; 0000 006C       // OC2 output: Disconnected
                 ; 0000 006D       ASSR = 0 << AS2;
0000a1 bde2      	OUT  0x22,R30
                 ; 0000 006E       TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
0000a2 bde5      	OUT  0x25,R30
                 ; 0000 006F       TCNT2 = 0x00;
0000a3 bde4      	OUT  0x24,R30
                 ; 0000 0070       OCR2 = 0x00;
0000a4 bde3      	OUT  0x23,R30
                 ; 0000 0071 
                 ; 0000 0072       // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0073       TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0)  ...
0000a5 bfe9      	OUT  0x39,R30
                 ; 0000 0074 
                 ; 0000 0075       // External Interrupt(s) initialization
                 ; 0000 0076       // INT0: Off
                 ; 0000 0077       // INT1: Off
                 ; 0000 0078       // INT2: Off
                 ; 0000 0079       MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
0000a6 bfe5      	OUT  0x35,R30
                 ; 0000 007A       MCUCSR = (0 << ISC2);
0000a7 bfe4      	OUT  0x34,R30
                 ; 0000 007B 
                 ; 0000 007C       // USART initialization
                 ; 0000 007D       // USART disabled
                 ; 0000 007E       UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 < ...
0000a8 b9ea      	OUT  0xA,R30
                 ; 0000 007F 
                 ; 0000 0080       // Analog Comparator initialization
                 ; 0000 0081       // Analog Comparator: Off
                 ; 0000 0082       // The Analog Comparator's positive input is
                 ; 0000 0083       // connected to the AIN0 pin
                 ; 0000 0084       // The Analog Comparator's negative input is
                 ; 0000 0085       // connected to the AIN1 pin
                 ; 0000 0086       ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0 ...
0000a9 e8e0      	LDI  R30,LOW(128)
0000aa b9e8      	OUT  0x8,R30
                 ; 0000 0087       SFIOR = (0 << ACME);
0000ab e0e0      	LDI  R30,LOW(0)
0000ac bfe0      	OUT  0x30,R30
                 ; 0000 0088 
                 ; 0000 0089       // ADC initialization
                 ; 0000 008A       // ADC disabled
                 ; 0000 008B       ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 < ...
0000ad b9e6      	OUT  0x6,R30
                 ; 0000 008C 
                 ; 0000 008D       // SPI initialization
                 ; 0000 008E       // SPI disabled
                 ; 0000 008F       SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0 ...
0000ae b9ed      	OUT  0xD,R30
                 ; 0000 0090 
                 ; 0000 0091       // TWI initialization
                 ; 0000 0092       // TWI disabled
                 ; 0000 0093       TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
0000af bfe6      	OUT  0x36,R30
                 ; 0000 0094 
                 ; 0000 0095       // Alphanumeric LCD initialization
                 ; 0000 0096       // Connections are specified in the
                 ; 0000 0097       // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0098       // RS - PORTA Bit 0
                 ; 0000 0099       // RD - PORTA Bit 1
                 ; 0000 009A       // EN - PORTA Bit 2
                 ; 0000 009B       // D4 - PORTA Bit 4
                 ; 0000 009C       // D5 - PORTA Bit 5
                 ; 0000 009D       // D6 - PORTA Bit 6
                 ; 0000 009E       // D7 - PORTA Bit 7
                 ; 0000 009F       // Characters/line: 16
                 ; 0000 00A0       lcd_init(16);
0000b0 e1a0      	LDI  R26,LOW(16)
0000b1 940e 02de 	CALL _lcd_init
                 ; 0000 00A1 
                 ; 0000 00A2       sprintf(str_number, "%d", number);
0000b3 940e 0324 	CALL SUBOPT_0x0
                 ; 0000 00A3       while (1)
                 _0x6:
                 ; 0000 00A4       {
                 ; 0000 00A5 
                 ; 0000 00A6             lcd_gotoxy(0, 0);
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 93ea      	ST   -Y,R30
0000b7 e0a0      	LDI  R26,LOW(0)
0000b8 940e 029f 	CALL _lcd_gotoxy
                 ; 0000 00A7             lcd_puts(str_number);
0000ba 01de      	MOVW R26,R28
0000bb 940e 02cd 	CALL _lcd_puts
                 ; 0000 00A8 
                 ; 0000 00A9             if (PINC.0 == 1)
0000bd 9b98      	SBIS 0x13,0
0000be c00a      	RJMP _0x9
                 ; 0000 00AA             {
                 ; 0000 00AB                   clear_str(str_number);
0000bf 01de      	MOVW R26,R28
0000c0 dfaf      	RCALL _clear_str
                 ; 0000 00AC                   number++;
                +
0000c1 5f0f     +SUBI R16 , LOW ( - 1 )
0000c2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00AD                   sprintf(str_number, "%d", number);
0000c3 940e 0324 	CALL SUBOPT_0x0
                 ; 0000 00AE                   delay_ms(270);
0000c5 e0ae      	LDI  R26,LOW(270)
0000c6 e0b1      	LDI  R27,HIGH(270)
0000c7 940e 036e 	CALL _delay_ms
                 ; 0000 00AF 
                 ; 0000 00B0             }
                 ; 0000 00B1             if (PINC.1 == 1)
                 _0x9:
0000c9 9b99      	SBIS 0x13,1
0000ca c00a      	RJMP _0xA
                 ; 0000 00B2             {
                 ; 0000 00B3                   clear_str(str_number);
0000cb 01de      	MOVW R26,R28
0000cc dfa3      	RCALL _clear_str
                 ; 0000 00B4                   number--;
                +
0000cd 5001     +SUBI R16 , LOW ( 1 )
0000ce 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 00B5                   sprintf(str_number, "%d", number);
0000cf 940e 0324 	CALL SUBOPT_0x0
                 ; 0000 00B6                   delay_ms(270);
0000d1 e0ae      	LDI  R26,LOW(270)
0000d2 e0b1      	LDI  R27,HIGH(270)
0000d3 940e 036e 	CALL _delay_ms
                 ; 0000 00B7 
                 ; 0000 00B8 
                 ; 0000 00B9             }
                 ; 0000 00BA       }
                 _0xA:
0000d5 cfdf      	RJMP _0x6
                 ; 0000 00BB }
                 _0xB:
0000d6 cfff      	RJMP _0xB
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000d7 93ba      	ST   -Y,R27
0000d8 93aa      	ST   -Y,R26
0000d9 931a      	ST   -Y,R17
0000da 930a      	ST   -Y,R16
0000db 81aa      	LDD  R26,Y+2
0000dc 81bb      	LDD  R27,Y+2+1
0000dd 9612      	ADIW R26,2
0000de 940e 0385 	CALL __GETW1P
0000e0 9730      	SBIW R30,0
0000e1 f159      	BREQ _0x2000010
0000e2 81aa      	LDD  R26,Y+2
0000e3 81bb      	LDD  R27,Y+2+1
0000e4 9614      	ADIW R26,4
0000e5 940e 0385 	CALL __GETW1P
0000e7 018f      	MOVW R16,R30
0000e8 9730      	SBIW R30,0
0000e9 f061      	BREQ _0x2000012
                +
0000ea 3002     +CPI R16 , LOW ( 2 )
0000eb e0e0     +LDI R30 , HIGH ( 2 )
0000ec 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000ed f098      	BRLO _0x2000013
0000ee 01f8      	MOVW R30,R16
0000ef 9731      	SBIW R30,1
0000f0 018f      	MOVW R16,R30
                +
0000f1 81aa     +LDD R26 , Y + 2
0000f2 81bb     +LDD R27 , Y + 2 + 1
0000f3 9614     +ADIW R26 , 4
0000f4 93ed     +ST X + , R30
0000f5 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0000f6 81aa      	LDD  R26,Y+2
0000f7 81bb      	LDD  R27,Y+2+1
0000f8 9612      	ADIW R26,2
0000f9 91ed      	LD   R30,X+
0000fa 91fd      	LD   R31,X+
0000fb 9631      	ADIW R30,1
0000fc 93fe      	ST   -X,R31
0000fd 93ee      	ST   -X,R30
0000fe 9731      	SBIW R30,1
0000ff 81ac      	LDD  R26,Y+4
000100 83a0      	STD  Z+0,R26
                 _0x2000013:
000101 81aa      	LDD  R26,Y+2
000102 81bb      	LDD  R27,Y+2+1
000103 940e 0385 	CALL __GETW1P
000105 23ff      	TST  R31
000106 f02a      	BRMI _0x2000014
000107 91ed      	LD   R30,X+
000108 91fd      	LD   R31,X+
000109 9631      	ADIW R30,1
00010a 93fe      	ST   -X,R31
00010b 93ee      	ST   -X,R30
                 _0x2000014:
00010c c006      	RJMP _0x2000015
                 _0x2000010:
00010d 81aa      	LDD  R26,Y+2
00010e 81bb      	LDD  R27,Y+2+1
00010f efef      	LDI  R30,LOW(65535)
000110 efff      	LDI  R31,HIGH(65535)
000111 93ed      	ST   X+,R30
000112 93fc      	ST   X,R31
                 _0x2000015:
000113 8119      	LDD  R17,Y+1
000114 8108      	LDD  R16,Y+0
000115 9625      	ADIW R28,5
000116 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000117 93ba      	ST   -Y,R27
000118 93aa      	ST   -Y,R26
000119 9726      	SBIW R28,6
00011a 940e 0392 	CALL __SAVELOCR6
00011c e010      	LDI  R17,0
00011d 85ac      	LDD  R26,Y+12
00011e 85bd      	LDD  R27,Y+12+1
00011f e0e0      	LDI  R30,LOW(0)
000120 e0f0      	LDI  R31,HIGH(0)
000121 93ed      	ST   X+,R30
000122 93fc      	ST   X,R31
                 _0x2000016:
000123 89ea      	LDD  R30,Y+18
000124 89fb      	LDD  R31,Y+18+1
000125 9631      	ADIW R30,1
000126 8bea      	STD  Y+18,R30
000127 8bfb      	STD  Y+18+1,R31
000128 9731      	SBIW R30,1
000129 91e4      	LPM  R30,Z
00012a 2f2e      	MOV  R18,R30
00012b 30e0      	CPI  R30,0
00012c f409      	BRNE PC+2
00012d c115      	RJMP _0x2000018
00012e 2fe1      	MOV  R30,R17
00012f 30e0      	CPI  R30,0
000130 f439      	BRNE _0x200001C
000131 3225      	CPI  R18,37
000132 f411      	BRNE _0x200001D
000133 e011      	LDI  R17,LOW(1)
000134 c002      	RJMP _0x200001E
                 _0x200001D:
000135 940e 0335 	CALL SUBOPT_0x1
                 _0x200001E:
000137 c10a      	RJMP _0x200001B
                 _0x200001C:
000138 30e1      	CPI  R30,LOW(0x1)
000139 f4a9      	BRNE _0x200001F
00013a 3225      	CPI  R18,37
00013b f419      	BRNE _0x2000020
00013c 940e 0335 	CALL SUBOPT_0x1
00013e c102      	RJMP _0x20000CC
                 _0x2000020:
00013f e012      	LDI  R17,LOW(2)
000140 e040      	LDI  R20,LOW(0)
000141 e000      	LDI  R16,LOW(0)
000142 322d      	CPI  R18,45
000143 f411      	BRNE _0x2000021
000144 e001      	LDI  R16,LOW(1)
000145 c0fc      	RJMP _0x200001B
                 _0x2000021:
000146 322b      	CPI  R18,43
000147 f411      	BRNE _0x2000022
000148 e24b      	LDI  R20,LOW(43)
000149 c0f8      	RJMP _0x200001B
                 _0x2000022:
00014a 3220      	CPI  R18,32
00014b f411      	BRNE _0x2000023
00014c e240      	LDI  R20,LOW(32)
00014d c0f4      	RJMP _0x200001B
                 _0x2000023:
00014e c002      	RJMP _0x2000024
                 _0x200001F:
00014f 30e2      	CPI  R30,LOW(0x2)
000150 f439      	BRNE _0x2000025
                 _0x2000024:
000151 e050      	LDI  R21,LOW(0)
000152 e013      	LDI  R17,LOW(3)
000153 3320      	CPI  R18,48
000154 f411      	BRNE _0x2000026
000155 6800      	ORI  R16,LOW(128)
000156 c0eb      	RJMP _0x200001B
                 _0x2000026:
000157 c003      	RJMP _0x2000027
                 _0x2000025:
000158 30e3      	CPI  R30,LOW(0x3)
000159 f009      	BREQ PC+2
00015a c0e7      	RJMP _0x200001B
                 _0x2000027:
00015b 3320      	CPI  R18,48
00015c f010      	BRLO _0x200002A
00015d 332a      	CPI  R18,58
00015e f008      	BRLO _0x200002B
                 _0x200002A:
00015f c007      	RJMP _0x2000029
                 _0x200002B:
000160 e0aa      	LDI  R26,LOW(10)
000161 9f5a      	MUL  R21,R26
000162 2d50      	MOV  R21,R0
000163 2fe2      	MOV  R30,R18
000164 53e0      	SUBI R30,LOW(48)
000165 0f5e      	ADD  R21,R30
000166 c0db      	RJMP _0x200001B
                 _0x2000029:
000167 2fe2      	MOV  R30,R18
000168 36e3      	CPI  R30,LOW(0x63)
000169 f449      	BRNE _0x200002F
00016a 940e 033c 	CALL SUBOPT_0x2
00016c 89e8      	LDD  R30,Y+16
00016d 89f9      	LDD  R31,Y+16+1
00016e 81a4      	LDD  R26,Z+4
00016f 93aa      	ST   -Y,R26
000170 940e 0342 	CALL SUBOPT_0x3
000172 c0ce      	RJMP _0x2000030
                 _0x200002F:
000173 37e3      	CPI  R30,LOW(0x73)
000174 f441      	BRNE _0x2000032
000175 940e 033c 	CALL SUBOPT_0x2
000177 940e 0348 	CALL SUBOPT_0x4
000179 940e 030b 	CALL _strlen
00017b 2f1e      	MOV  R17,R30
00017c c00a      	RJMP _0x2000033
                 _0x2000032:
00017d 37e0      	CPI  R30,LOW(0x70)
00017e f461      	BRNE _0x2000035
00017f 940e 033c 	CALL SUBOPT_0x2
000181 940e 0348 	CALL SUBOPT_0x4
000183 940e 0317 	CALL _strlenf
000185 2f1e      	MOV  R17,R30
000186 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000187 6002      	ORI  R16,LOW(2)
000188 770f      	ANDI R16,LOW(127)
000189 e030      	LDI  R19,LOW(0)
00018a c034      	RJMP _0x2000036
                 _0x2000035:
00018b 36e4      	CPI  R30,LOW(0x64)
00018c f011      	BREQ _0x2000039
00018d 36e9      	CPI  R30,LOW(0x69)
00018e f411      	BRNE _0x200003A
                 _0x2000039:
00018f 6004      	ORI  R16,LOW(4)
000190 c002      	RJMP _0x200003B
                 _0x200003A:
000191 37e5      	CPI  R30,LOW(0x75)
000192 f431      	BRNE _0x200003C
                 _0x200003B:
000193 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000194 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000195 83ee      	STD  Y+6,R30
000196 83ff      	STD  Y+6+1,R31
000197 e015      	LDI  R17,LOW(5)
000198 c00c      	RJMP _0x200003D
                 _0x200003C:
000199 35e8      	CPI  R30,LOW(0x58)
00019a f411      	BRNE _0x200003F
00019b 6008      	ORI  R16,LOW(8)
00019c c003      	RJMP _0x2000040
                 _0x200003F:
00019d 37e8      	CPI  R30,LOW(0x78)
00019e f009      	BREQ PC+2
00019f c0a1      	RJMP _0x2000071
                 _0x2000040:
0001a0 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001a1 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001a2 83ee      	STD  Y+6,R30
0001a3 83ff      	STD  Y+6+1,R31
0001a4 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001a5 ff02      	SBRS R16,2
0001a6 c014      	RJMP _0x2000042
0001a7 940e 033c 	CALL SUBOPT_0x2
0001a9 940e 0352 	CALL SUBOPT_0x5
0001ab 85ab      	LDD  R26,Y+11
0001ac 23aa      	TST  R26
0001ad f43a      	BRPL _0x2000043
0001ae 85ea      	LDD  R30,Y+10
0001af 85fb      	LDD  R31,Y+10+1
0001b0 940e 037c 	CALL __ANEGW1
0001b2 87ea      	STD  Y+10,R30
0001b3 87fb      	STD  Y+10+1,R31
0001b4 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001b5 3040      	CPI  R20,0
0001b6 f011      	BREQ _0x2000044
0001b7 5f1f      	SUBI R17,-LOW(1)
0001b8 c001      	RJMP _0x2000045
                 _0x2000044:
0001b9 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001ba c004      	RJMP _0x2000046
                 _0x2000042:
0001bb 940e 033c 	CALL SUBOPT_0x2
0001bd 940e 0352 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001bf fd00      	SBRC R16,0
0001c0 c011      	RJMP _0x2000047
                 _0x2000048:
0001c1 1715      	CP   R17,R21
0001c2 f478      	BRSH _0x200004A
0001c3 ff07      	SBRS R16,7
0001c4 c008      	RJMP _0x200004B
0001c5 ff02      	SBRS R16,2
0001c6 c004      	RJMP _0x200004C
0001c7 7f0b      	ANDI R16,LOW(251)
0001c8 2f24      	MOV  R18,R20
0001c9 5011      	SUBI R17,LOW(1)
0001ca c001      	RJMP _0x200004D
                 _0x200004C:
0001cb e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001cc c001      	RJMP _0x200004E
                 _0x200004B:
0001cd e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001ce 940e 0335 	CALL SUBOPT_0x1
0001d0 5051      	SUBI R21,LOW(1)
0001d1 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001d2 2f31      	MOV  R19,R17
0001d3 ff01      	SBRS R16,1
0001d4 c017      	RJMP _0x200004F
                 _0x2000050:
0001d5 3030      	CPI  R19,0
0001d6 f0a1      	BREQ _0x2000052
0001d7 ff03      	SBRS R16,3
0001d8 c006      	RJMP _0x2000053
0001d9 81ee      	LDD  R30,Y+6
0001da 81ff      	LDD  R31,Y+6+1
0001db 9125      	LPM  R18,Z+
0001dc 83ee      	STD  Y+6,R30
0001dd 83ff      	STD  Y+6+1,R31
0001de c005      	RJMP _0x2000054
                 _0x2000053:
0001df 81ae      	LDD  R26,Y+6
0001e0 81bf      	LDD  R27,Y+6+1
0001e1 912d      	LD   R18,X+
0001e2 83ae      	STD  Y+6,R26
0001e3 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001e4 940e 0335 	CALL SUBOPT_0x1
0001e6 3050      	CPI  R21,0
0001e7 f009      	BREQ _0x2000055
0001e8 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001e9 5031      	SUBI R19,LOW(1)
0001ea cfea      	RJMP _0x2000050
                 _0x2000052:
0001eb c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001ec e320      	LDI  R18,LOW(48)
0001ed 81ee      	LDD  R30,Y+6
0001ee 81ff      	LDD  R31,Y+6+1
0001ef 940e 0389 	CALL __GETW1PF
0001f1 87e8      	STD  Y+8,R30
0001f2 87f9      	STD  Y+8+1,R31
0001f3 81ee      	LDD  R30,Y+6
0001f4 81ff      	LDD  R31,Y+6+1
0001f5 9632      	ADIW R30,2
0001f6 83ee      	STD  Y+6,R30
0001f7 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001f8 85e8      	LDD  R30,Y+8
0001f9 85f9      	LDD  R31,Y+8+1
0001fa 85aa      	LDD  R26,Y+10
0001fb 85bb      	LDD  R27,Y+10+1
0001fc 17ae      	CP   R26,R30
0001fd 07bf      	CPC  R27,R31
0001fe f050      	BRLO _0x200005C
0001ff 5f2f      	SUBI R18,-LOW(1)
000200 85a8      	LDD  R26,Y+8
000201 85b9      	LDD  R27,Y+8+1
000202 85ea      	LDD  R30,Y+10
000203 85fb      	LDD  R31,Y+10+1
000204 1bea      	SUB  R30,R26
000205 0bfb      	SBC  R31,R27
000206 87ea      	STD  Y+10,R30
000207 87fb      	STD  Y+10+1,R31
000208 cfef      	RJMP _0x200005A
                 _0x200005C:
000209 332a      	CPI  R18,58
00020a f028      	BRLO _0x200005D
00020b ff03      	SBRS R16,3
00020c c002      	RJMP _0x200005E
00020d 5f29      	SUBI R18,-LOW(7)
00020e c001      	RJMP _0x200005F
                 _0x200005E:
00020f 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000210 fd04      	SBRC R16,4
000211 c01a      	RJMP _0x2000061
000212 3321      	CPI  R18,49
000213 f420      	BRSH _0x2000063
000214 85a8      	LDD  R26,Y+8
000215 85b9      	LDD  R27,Y+8+1
000216 9711      	SBIW R26,1
000217 f409      	BRNE _0x2000062
                 _0x2000063:
000218 c009      	RJMP _0x20000CD
                 _0x2000062:
000219 1753      	CP   R21,R19
00021a f010      	BRLO _0x2000067
00021b ff00      	SBRS R16,0
00021c c001      	RJMP _0x2000068
                 _0x2000067:
00021d c013      	RJMP _0x2000066
                 _0x2000068:
00021e e220      	LDI  R18,LOW(32)
00021f ff07      	SBRS R16,7
000220 c00b      	RJMP _0x2000069
000221 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000222 6100      	ORI  R16,LOW(16)
000223 ff02      	SBRS R16,2
000224 c007      	RJMP _0x200006A
000225 7f0b      	ANDI R16,LOW(251)
000226 934a      	ST   -Y,R20
000227 940e 0342 	CALL SUBOPT_0x3
000229 3050      	CPI  R21,0
00022a f009      	BREQ _0x200006B
00022b 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00022c 940e 0335 	CALL SUBOPT_0x1
00022e 3050      	CPI  R21,0
00022f f009      	BREQ _0x200006C
000230 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000231 5031      	SUBI R19,LOW(1)
000232 85a8      	LDD  R26,Y+8
000233 85b9      	LDD  R27,Y+8+1
000234 9712      	SBIW R26,2
000235 f008      	BRLO _0x2000059
000236 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000237 ff00      	SBRS R16,0
000238 c008      	RJMP _0x200006D
                 _0x200006E:
000239 3050      	CPI  R21,0
00023a f031      	BREQ _0x2000070
00023b 5051      	SUBI R21,LOW(1)
00023c e2e0      	LDI  R30,LOW(32)
00023d 93ea      	ST   -Y,R30
00023e 940e 0342 	CALL SUBOPT_0x3
000240 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000241 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000242 cee0      	RJMP _0x2000016
                 _0x2000018:
000243 85ac      	LDD  R26,Y+12
000244 85bd      	LDD  R27,Y+12+1
000245 940e 0385 	CALL __GETW1P
000247 940e 0399 	CALL __LOADLOCR6
000249 9664      	ADIW R28,20
00024a 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00024b 92ff      	PUSH R15
00024c 2ef8      	MOV  R15,R24
00024d 9726      	SBIW R28,6
00024e 940e 0394 	CALL __SAVELOCR4
000250 940e 035a 	CALL SUBOPT_0x6
000252 9730      	SBIW R30,0
000253 f419      	BRNE _0x2000072
000254 efef      	LDI  R30,LOW(65535)
000255 efff      	LDI  R31,HIGH(65535)
000256 c023      	RJMP _0x20C0002
                 _0x2000072:
000257 01de      	MOVW R26,R28
000258 9616      	ADIW R26,6
000259 940e 0378 	CALL __ADDW2R15
00025b 018d      	MOVW R16,R26
00025c 940e 035a 	CALL SUBOPT_0x6
00025e 83ee      	STD  Y+6,R30
00025f 83ff      	STD  Y+6+1,R31
000260 e0e0      	LDI  R30,LOW(0)
000261 87e8      	STD  Y+8,R30
000262 87e9      	STD  Y+8+1,R30
000263 01de      	MOVW R26,R28
000264 961a      	ADIW R26,10
000265 940e 0378 	CALL __ADDW2R15
000267 940e 0385 	CALL __GETW1P
000269 93fa      	ST   -Y,R31
00026a 93ea      	ST   -Y,R30
00026b 931a      	ST   -Y,R17
00026c 930a      	ST   -Y,R16
00026d ede7      	LDI  R30,LOW(_put_buff_G100)
00026e e0f0      	LDI  R31,HIGH(_put_buff_G100)
00026f 93fa      	ST   -Y,R31
000270 93ea      	ST   -Y,R30
000271 01de      	MOVW R26,R28
000272 961a      	ADIW R26,10
000273 dea3      	RCALL __print_G100
000274 019f      	MOVW R18,R30
000275 81ae      	LDD  R26,Y+6
000276 81bf      	LDD  R27,Y+6+1
000277 e0e0      	LDI  R30,LOW(0)
000278 93ec      	ST   X,R30
000279 01f9      	MOVW R30,R18
                 _0x20C0002:
00027a 940e 039b 	CALL __LOADLOCR4
00027c 962a      	ADIW R28,10
00027d 90ff      	POP  R15
00027e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
00027f 93aa      	ST   -Y,R26
000280 b3eb      	IN   R30,0x1B
000281 70ef      	ANDI R30,LOW(0xF)
000282 2fae      	MOV  R26,R30
000283 81e8      	LD   R30,Y
000284 7fe0      	ANDI R30,LOW(0xF0)
000285 2bea      	OR   R30,R26
000286 bbeb      	OUT  0x1B,R30
                +
000287 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000288 958a     +DEC R24
000289 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028a 9ada      	SBI  0x1B,2
                +
00028b e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028c 958a     +DEC R24
00028d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028e 98da      	CBI  0x1B,2
                +
00028f e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000290 958a     +DEC R24
000291 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000292 c076      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000293 93aa      	ST   -Y,R26
000294 81a8      	LD   R26,Y
000295 dfe9      	RCALL __lcd_write_nibble_G102
000296 81e8          ld    r30,y
000297 95e2          swap  r30
000298 83e8          st    y,r30
000299 81a8      	LD   R26,Y
00029a dfe4      	RCALL __lcd_write_nibble_G102
                +
00029b e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00029c 958a     +DEC R24
00029d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00029e c06a      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00029f 93aa      	ST   -Y,R26
0002a0 81e8      	LD   R30,Y
0002a1 e0f0      	LDI  R31,0
0002a2 59ec      	SUBI R30,LOW(-__base_y_G102)
0002a3 4ffe      	SBCI R31,HIGH(-__base_y_G102)
0002a4 81e0      	LD   R30,Z
0002a5 81a9      	LDD  R26,Y+1
0002a6 0fae      	ADD  R26,R30
0002a7 dfeb      	RCALL __lcd_write_data
0002a8 8059      	LDD  R5,Y+1
0002a9 8048      	LDD  R4,Y+0
0002aa 9622      	ADIW R28,2
0002ab 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002ac e0a2      	LDI  R26,LOW(2)
0002ad 940e 0361 	CALL SUBOPT_0x7
0002af e0ac      	LDI  R26,LOW(12)
0002b0 dfe2      	RCALL __lcd_write_data
0002b1 e0a1      	LDI  R26,LOW(1)
0002b2 940e 0361 	CALL SUBOPT_0x7
0002b4 e0e0      	LDI  R30,LOW(0)
0002b5 2e4e      	MOV  R4,R30
0002b6 2e5e      	MOV  R5,R30
0002b7 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002b8 93aa      	ST   -Y,R26
0002b9 81a8      	LD   R26,Y
0002ba 30aa      	CPI  R26,LOW(0xA)
0002bb f011      	BREQ _0x2040005
0002bc 1457      	CP   R5,R7
0002bd f048      	BRLO _0x2040004
                 _0x2040005:
0002be e0e0      	LDI  R30,LOW(0)
0002bf 93ea      	ST   -Y,R30
0002c0 9443      	INC  R4
0002c1 2da4      	MOV  R26,R4
0002c2 dfdc      	RCALL _lcd_gotoxy
0002c3 81a8      	LD   R26,Y
0002c4 30aa      	CPI  R26,LOW(0xA)
0002c5 f409      	BRNE _0x2040007
0002c6 c042      	RJMP _0x20C0001
                 _0x2040007:
                 _0x2040004:
0002c7 9453      	INC  R5
0002c8 9ad8      	SBI  0x1B,0
0002c9 81a8      	LD   R26,Y
0002ca dfc8      	RCALL __lcd_write_data
0002cb 98d8      	CBI  0x1B,0
0002cc c03c      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002cd 93ba      	ST   -Y,R27
0002ce 93aa      	ST   -Y,R26
0002cf 931a      	ST   -Y,R17
                 _0x2040008:
0002d0 81a9      	LDD  R26,Y+1
0002d1 81ba      	LDD  R27,Y+1+1
0002d2 91ed      	LD   R30,X+
0002d3 83a9      	STD  Y+1,R26
0002d4 83ba      	STD  Y+1+1,R27
0002d5 2f1e      	MOV  R17,R30
0002d6 30e0      	CPI  R30,0
0002d7 f019      	BREQ _0x204000A
0002d8 2fa1      	MOV  R26,R17
0002d9 dfde      	RCALL _lcd_putchar
0002da cff5      	RJMP _0x2040008
                 _0x204000A:
0002db 8118      	LDD  R17,Y+0
0002dc 9623      	ADIW R28,3
0002dd 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002de 93aa      	ST   -Y,R26
0002df b3ea      	IN   R30,0x1A
0002e0 6fe0      	ORI  R30,LOW(0xF0)
0002e1 bbea      	OUT  0x1A,R30
0002e2 9ad2      	SBI  0x1A,2
0002e3 9ad0      	SBI  0x1A,0
0002e4 9ad1      	SBI  0x1A,1
0002e5 98da      	CBI  0x1B,2
0002e6 98d8      	CBI  0x1B,0
0002e7 98d9      	CBI  0x1B,1
0002e8 8078      	LDD  R7,Y+0
0002e9 81e8      	LD   R30,Y
0002ea 58e0      	SUBI R30,-LOW(128)
                +
0002eb 93e0 0166+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
0002ed 81e8      	LD   R30,Y
0002ee 54e0      	SUBI R30,-LOW(192)
                +
0002ef 93e0 0167+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
0002f1 e1a4      	LDI  R26,LOW(20)
0002f2 e0b0      	LDI  R27,0
0002f3 940e 036e 	CALL _delay_ms
0002f5 940e 0367 	CALL SUBOPT_0x8
0002f7 940e 0367 	CALL SUBOPT_0x8
0002f9 940e 0367 	CALL SUBOPT_0x8
0002fb e2a0      	LDI  R26,LOW(32)
0002fc df82      	RCALL __lcd_write_nibble_G102
                +
0002fd e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0002fe 958a     +DEC R24
0002ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000300 e2a8      	LDI  R26,LOW(40)
000301 df91      	RCALL __lcd_write_data
000302 e0a4      	LDI  R26,LOW(4)
000303 df8f      	RCALL __lcd_write_data
000304 e8a5      	LDI  R26,LOW(133)
000305 df8d      	RCALL __lcd_write_data
000306 e0a6      	LDI  R26,LOW(6)
000307 df8b      	RCALL __lcd_write_data
000308 dfa3      	RCALL _lcd_clear
                 _0x20C0001:
000309 9621      	ADIW R28,1
00030a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00030b 93ba      	ST   -Y,R27
00030c 93aa      	ST   -Y,R26
00030d 91a9          ld   r26,y+
00030e 91b9          ld   r27,y+
00030f 27ee          clr  r30
000310 27ff          clr  r31
                 strlen0:
000311 916d          ld   r22,x+
000312 2366          tst  r22
000313 f011          breq strlen1
000314 9631          adiw r30,1
000315 cffb          rjmp strlen0
                 strlen1:
000316 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000317 93ba      	ST   -Y,R27
000318 93aa      	ST   -Y,R26
000319 27aa          clr  r26
00031a 27bb          clr  r27
00031b 91e9          ld   r30,y+
00031c 91f9          ld   r31,y+
                 strlenf0:
00031d 9005      	lpm  r0,z+
00031e 2000          tst  r0
00031f f011          breq strlenf1
000320 9611          adiw r26,1
000321 cffb          rjmp strlenf0
                 strlenf1:
000322 01fd          movw r30,r26
000323 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 __base_y_G102:
000164           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x0:
000324 01fe      	MOVW R30,R28
000325 93fa      	ST   -Y,R31
000326 93ea      	ST   -Y,R30
                +
000327 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000328 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000329 93fa      	ST   -Y,R31
00032a 93ea      	ST   -Y,R30
00032b 01f8      	MOVW R30,R16
00032c 940e 0380 	CALL __CWD1
00032e 940e 038d 	CALL __PUTPARD1
000330 e084      	LDI  R24,4
000331 940e 024b 	CALL _sprintf
000333 9628      	ADIW R28,8
000334 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000335 932a      	ST   -Y,R18
000336 85ad      	LDD  R26,Y+13
000337 85be      	LDD  R27,Y+13+1
000338 85ef      	LDD  R30,Y+15
000339 89f8      	LDD  R31,Y+15+1
00033a 9509      	ICALL
00033b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00033c 89e8      	LDD  R30,Y+16
00033d 89f9      	LDD  R31,Y+16+1
00033e 9734      	SBIW R30,4
00033f 8be8      	STD  Y+16,R30
000340 8bf9      	STD  Y+16+1,R31
000341 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000342 85ad      	LDD  R26,Y+13
000343 85be      	LDD  R27,Y+13+1
000344 85ef      	LDD  R30,Y+15
000345 89f8      	LDD  R31,Y+15+1
000346 9509      	ICALL
000347 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000348 89a8      	LDD  R26,Y+16
000349 89b9      	LDD  R27,Y+16+1
00034a 9614      	ADIW R26,4
00034b 940e 0385 	CALL __GETW1P
00034d 83ee      	STD  Y+6,R30
00034e 83ff      	STD  Y+6+1,R31
00034f 81ae      	LDD  R26,Y+6
000350 81bf      	LDD  R27,Y+6+1
000351 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000352 89a8      	LDD  R26,Y+16
000353 89b9      	LDD  R27,Y+16+1
000354 9614      	ADIW R26,4
000355 940e 0385 	CALL __GETW1P
000357 87ea      	STD  Y+10,R30
000358 87fb      	STD  Y+10+1,R31
000359 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00035a 01de      	MOVW R26,R28
00035b 961c      	ADIW R26,12
00035c 940e 0378 	CALL __ADDW2R15
00035e 940e 0385 	CALL __GETW1P
000360 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000361 940e 0293 	CALL __lcd_write_data
000363 e0a3      	LDI  R26,LOW(3)
000364 e0b0      	LDI  R27,0
000365 940c 036e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
000367 e3a0      	LDI  R26,LOW(48)
000368 940e 027f 	CALL __lcd_write_nibble_G102
                +
00036a e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00036b 958a     +DEC R24
00036c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00036d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00036e 9610      	adiw r26,0
00036f f039      	breq __delay_ms1
                 __delay_ms0:
000370 95a8      	wdr
                +
000371 ef8a     +LDI R24 , LOW ( 0xFA )
000372 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000373 9701     +SBIW R24 , 1
000374 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000375 9711      	sbiw r26,1
000376 f7c9      	brne __delay_ms0
                 __delay_ms1:
000377 9508      	ret
                 
                 __ADDW2R15:
000378 2400      	CLR  R0
000379 0daf      	ADD  R26,R15
00037a 1db0      	ADC  R27,R0
00037b 9508      	RET
                 
                 __ANEGW1:
00037c 95f1      	NEG  R31
00037d 95e1      	NEG  R30
00037e 40f0      	SBCI R31,0
00037f 9508      	RET
                 
                 __CWD1:
000380 2f6f      	MOV  R22,R31
000381 0f66      	ADD  R22,R22
000382 0b66      	SBC  R22,R22
000383 2f76      	MOV  R23,R22
000384 9508      	RET
                 
                 __GETW1P:
000385 91ed      	LD   R30,X+
000386 91fc      	LD   R31,X
000387 9711      	SBIW R26,1
000388 9508      	RET
                 
                 __GETW1PF:
000389 9005      	LPM  R0,Z+
00038a 91f4      	LPM  R31,Z
00038b 2de0      	MOV  R30,R0
00038c 9508      	RET
                 
                 __PUTPARD1:
00038d 937a      	ST   -Y,R23
00038e 936a      	ST   -Y,R22
00038f 93fa      	ST   -Y,R31
000390 93ea      	ST   -Y,R30
000391 9508      	RET
                 
                 __SAVELOCR6:
000392 935a      	ST   -Y,R21
                 __SAVELOCR5:
000393 934a      	ST   -Y,R20
                 __SAVELOCR4:
000394 933a      	ST   -Y,R19
                 __SAVELOCR3:
000395 932a      	ST   -Y,R18
                 __SAVELOCR2:
000396 931a      	ST   -Y,R17
000397 930a      	ST   -Y,R16
000398 9508      	RET
                 
                 __LOADLOCR6:
000399 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00039a 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00039b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00039c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00039d 8119      	LDD  R17,Y+1
00039e 8108      	LD   R16,Y
00039f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  44 r17:  32 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   3 r26: 104 r27:  41 r28:  20 r29:   1 r30: 190 r31:  58 
x  :  24 y  : 174 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  57 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   3 cpi   :  34 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  23 ld    :  25 ldd   :  81 ldi   :  92 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  19 movw  :  20 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  42 pop   :   1 push  :   1 rcall :  16 ret   :  27 
reti  :   0 rjmp  :  62 rol   :   0 ror   :   0 sbc   :   2 sbci  :   5 
sbi   :   5 sbic  :   0 sbis  :   2 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :  31 sts   :   2 sub   :   1 subi  :  19 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000740   1806     50   1856   16384  11.3%
[.dseg] 0x000060 0x000168      0      8      8    1024   0.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
