
AVRASM ver. 2.1.30  C:\Users\priso\OneDrive\Desktop\timer_with_delay\Debug\List\timer.asm Sun May 19 15:57:11 2024

C:\Users\priso\OneDrive\Desktop\timer_with_delay\Debug\List\timer.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\priso\OneDrive\Desktop\timer_with_delay\Debug\List\timer.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\priso\OneDrive\Desktop\timer_with_delay\Debug\List\timer.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6425
000034 3a00
C:\Users\priso\OneDrive\Desktop\timer_with_delay\Debug\List\timer.asm(1128): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x25,0x64,0x0,0x3A,0x0
                 _0x2020003:
000036 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000037 0002      	.DW  0x02
000038 0160      	.DW  _0x6
000039 0069      	.DW  _0x0*2+3
                 
00003a 0002      	.DW  0x02
00003b 0162      	.DW  __base_y_G101
00003c 006c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00003d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003e 94f8      	CLI
00003f 27ee      	CLR  R30
000040 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000041 e0f1      	LDI  R31,1
000042 bffb      	OUT  GICR,R31
000043 bfeb      	OUT  GICR,R30
000044 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000045 e08d      	LDI  R24,(14-2)+1
000046 e0a2      	LDI  R26,2
000047 27bb      	CLR  R27
                 __CLEAR_REG:
000048 93ed      	ST   X+,R30
000049 958a      	DEC  R24
00004a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004e 93ed      	ST   X+,R30
00004f 9701      	SBIW R24,1
000050 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000051 e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000052 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000053 9185      	LPM  R24,Z+
000054 9195      	LPM  R25,Z+
000055 9700      	SBIW R24,0
000056 f061      	BREQ __GLOBAL_INI_END
000057 91a5      	LPM  R26,Z+
000058 91b5      	LPM  R27,Z+
000059 9005      	LPM  R0,Z+
00005a 9015      	LPM  R1,Z+
00005b 01bf      	MOVW R22,R30
00005c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005d 9005      	LPM  R0,Z+
00005e 920d      	ST   X+,R0
00005f 9701      	SBIW R24,1
000060 f7e1      	BRNE __GLOBAL_INI_LOOP
000061 01fb      	MOVW R30,R22
000062 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000063 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000064 bfed      	OUT  SPL,R30
000065 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000066 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000067 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000068 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000069 940c 006b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 19/05/2024
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0022 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0023       // Declare your local variables here
                 ; 0000 0024       char str_minute[16];
                 ; 0000 0025       char str_secend[16];
                 ; 0000 0026       int minute = 0;
                 ; 0000 0027       int secend = 0;
                 ; 0000 0028       // Input/Output Ports initialization
                 ; 0000 0029       // Port A initialization
                 ; 0000 002A       // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002B       DDRA = (1 << DDA7) | (1 << DDA6) | (1 << DDA5) | (1 << DDA4) | (1 << DDA3) | (1 << DDA2) | (1 << DDA1) | (1 << DDA ...
00006b 97a0      	SBIW R28,32
                 ;	str_minute -> Y+16
                 ;	str_secend -> Y+0
                 ;	minute -> R16,R17
                 ;	secend -> R18,R19
                +
00006c e000     +LDI R16 , LOW ( 0 )
00006d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00006e e020     +LDI R18 , LOW ( 0 )
00006f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000070 efef      	LDI  R30,LOW(255)
000071 bbea      	OUT  0x1A,R30
                 ; 0000 002C       // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 002D       PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORT ...
000072 e0e0      	LDI  R30,LOW(0)
000073 bbeb      	OUT  0x1B,R30
                 ; 0000 002E 
                 ; 0000 002F       // Port B initialization
                 ; 0000 0030       // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0031       DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB ...
000074 bbe7      	OUT  0x17,R30
                 ; 0000 0032       // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0033       PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORT ...
000075 bbe8      	OUT  0x18,R30
                 ; 0000 0034 
                 ; 0000 0035       // Port C initialization
                 ; 0000 0036       // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0037       DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC ...
000076 bbe4      	OUT  0x14,R30
                 ; 0000 0038       // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0039       PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORT ...
000077 bbe5      	OUT  0x15,R30
                 ; 0000 003A 
                 ; 0000 003B       // Port D initialization
                 ; 0000 003C       // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003D       DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD ...
000078 bbe1      	OUT  0x11,R30
                 ; 0000 003E       // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003F       PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORT ...
000079 bbe2      	OUT  0x12,R30
                 ; 0000 0040 
                 ; 0000 0041       // Timer/Counter 0 initialization
                 ; 0000 0042       // Clock source: System Clock
                 ; 0000 0043       // Clock value: Timer 0 Stopped
                 ; 0000 0044       // Mode: Normal top=0xFF
                 ; 0000 0045       // OC0 output: Disconnected
                 ; 0000 0046       TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
00007a bfe3      	OUT  0x33,R30
                 ; 0000 0047       TCNT0 = 0x00;
00007b bfe2      	OUT  0x32,R30
                 ; 0000 0048       OCR0 = 0x00;
00007c bfec      	OUT  0x3C,R30
                 ; 0000 0049 
                 ; 0000 004A       // Timer/Counter 1 initialization
                 ; 0000 004B       // Clock source: System Clock
                 ; 0000 004C       // Clock value: 31.250 kHz
                 ; 0000 004D       // Mode: Normal top=0xFFFF
                 ; 0000 004E       // OC1A output: Disconnected
                 ; 0000 004F       // OC1B output: Disconnected
                 ; 0000 0050       // Noise Canceler: Off
                 ; 0000 0051       // Input Capture on Falling Edge
                 ; 0000 0052       // Timer Period: 1 s
                 ; 0000 0053       // Timer1 Overflow Interrupt: On
                 ; 0000 0054       // Input Capture Interrupt: Off
                 ; 0000 0055       // Compare A Match Interrupt: Off
                 ; 0000 0056       // Compare B Match Interrupt: Off
                 ; 0000 0057       TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
00007d bdef      	OUT  0x2F,R30
                 ; 0000 0058       TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (1 << CS12) | (0 << CS11) | (0 << CS10);
00007e e0e4      	LDI  R30,LOW(4)
00007f bdee      	OUT  0x2E,R30
                 ; 0000 0059       TCNT1H = 0x85;
000080 e8e5      	LDI  R30,LOW(133)
000081 bded      	OUT  0x2D,R30
                 ; 0000 005A       TCNT1L = 0xEE;
000082 eeee      	LDI  R30,LOW(238)
000083 bdec      	OUT  0x2C,R30
                 ; 0000 005B       ICR1H = 0x00;
000084 e0e0      	LDI  R30,LOW(0)
000085 bde7      	OUT  0x27,R30
                 ; 0000 005C       ICR1L = 0x00;
000086 bde6      	OUT  0x26,R30
                 ; 0000 005D       OCR1AH = 0x00;
000087 bdeb      	OUT  0x2B,R30
                 ; 0000 005E       OCR1AL = 0x00;
000088 bdea      	OUT  0x2A,R30
                 ; 0000 005F       OCR1BH = 0x00;
000089 bde9      	OUT  0x29,R30
                 ; 0000 0060       OCR1BL = 0x00;
00008a bde8      	OUT  0x28,R30
                 ; 0000 0061 
                 ; 0000 0062       // External Interrupt(s) initialization
                 ; 0000 0063       // INT0: Off
                 ; 0000 0064       // INT1: Off
                 ; 0000 0065       // INT2: Off
                 ; 0000 0066       MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
00008b bfe5      	OUT  0x35,R30
                 ; 0000 0067       MCUCSR = (0 << ISC2);
00008c bfe4      	OUT  0x34,R30
                 ; 0000 0068 
                 ; 0000 0069       // USART initialization
                 ; 0000 006A       // USART disabled
                 ; 0000 006B       UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 < ...
00008d b9ea      	OUT  0xA,R30
                 ; 0000 006C 
                 ; 0000 006D       // Analog Comparator initialization
                 ; 0000 006E       // Analog Comparator: Off
                 ; 0000 006F       // The Analog Comparator's positive input is
                 ; 0000 0070       // connected to the AIN0 pin
                 ; 0000 0071       // The Analog Comparator's negative input is
                 ; 0000 0072       // connected to the AIN1 pin
                 ; 0000 0073       ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0 ...
00008e e8e0      	LDI  R30,LOW(128)
00008f b9e8      	OUT  0x8,R30
                 ; 0000 0074       SFIOR = (0 << ACME);
000090 e0e0      	LDI  R30,LOW(0)
000091 bfe0      	OUT  0x30,R30
                 ; 0000 0075 
                 ; 0000 0076       // ADC initialization
                 ; 0000 0077       // ADC disabled
                 ; 0000 0078       ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 < ...
000092 b9e6      	OUT  0x6,R30
                 ; 0000 0079 
                 ; 0000 007A       // SPI initialization
                 ; 0000 007B       // SPI disabled
                 ; 0000 007C       SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0 ...
000093 b9ed      	OUT  0xD,R30
                 ; 0000 007D 
                 ; 0000 007E       // TWI initialization
                 ; 0000 007F       // TWI disabled
                 ; 0000 0080       TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
000094 bfe6      	OUT  0x36,R30
                 ; 0000 0081 
                 ; 0000 0082       // Alphanumeric LCD initialization
                 ; 0000 0083       // Connections are specified in the
                 ; 0000 0084       // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0085       // RS - PORTA Bit 0
                 ; 0000 0086       // RD - PORTA Bit 1
                 ; 0000 0087       // EN - PORTA Bit 2
                 ; 0000 0088       // D4 - PORTA Bit 4
                 ; 0000 0089       // D5 - PORTA Bit 5
                 ; 0000 008A       // D6 - PORTA Bit 6
                 ; 0000 008B       // D7 - PORTA Bit 7
                 ; 0000 008C       // Characters/line: 16
                 ; 0000 008D       lcd_init(16);
000095 e1a0      	LDI  R26,LOW(16)
000096 940e 02d4 	CALL _lcd_init
                 ; 0000 008E 
                 ; 0000 008F // Global enable interrupts
                 ; 0000 0090 #asm("sei")
000098 9478      	sei
                 ; 0000 0091 
                 ; 0000 0092       while (1)
                 _0x3:
                 ; 0000 0093       {
                 ; 0000 0094 
                 ; 0000 0095             sprintf(str_minute, "%d", minute);
000099 01fe      	MOVW R30,R28
00009a 9670      	ADIW R30,16
00009b 940e 031b 	CALL SUBOPT_0x0
00009d 01f8      	MOVW R30,R16
00009e 940e 0322 	CALL SUBOPT_0x1
                 ; 0000 0096             lcd_gotoxy(0, 0);
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 940e 032b 	CALL SUBOPT_0x2
                 ; 0000 0097             lcd_puts(str_minute);
0000a3 01de      	MOVW R26,R28
0000a4 9650      	ADIW R26,16
0000a5 940e 02c3 	CALL _lcd_puts
                 ; 0000 0098 
                 ; 0000 0099             lcd_gotoxy(2, 0);
0000a7 e0e2      	LDI  R30,LOW(2)
0000a8 940e 032b 	CALL SUBOPT_0x2
                 ; 0000 009A             lcd_puts(":");
                +
0000aa e6a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000ab e0b1     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000ac 940e 02c3 	CALL _lcd_puts
                 ; 0000 009B 
                 ; 0000 009C             sprintf(str_secend, "%d", secend);
0000ae 01fe      	MOVW R30,R28
0000af 940e 031b 	CALL SUBOPT_0x0
0000b1 01f9      	MOVW R30,R18
0000b2 940e 0322 	CALL SUBOPT_0x1
                 ; 0000 009D             lcd_gotoxy(3, 0);
0000b4 e0e3      	LDI  R30,LOW(3)
0000b5 940e 032b 	CALL SUBOPT_0x2
                 ; 0000 009E             lcd_puts(str_secend);
0000b7 01de      	MOVW R26,R28
0000b8 940e 02c3 	CALL _lcd_puts
                 ; 0000 009F 
                 ; 0000 00A0             delay_ms(100);
0000ba e6a4      	LDI  R26,LOW(100)
0000bb e0b0      	LDI  R27,0
0000bc 940e 0369 	CALL _delay_ms
                 ; 0000 00A1             secend++;
                +
0000be 5f2f     +SUBI R18 , LOW ( - 1 )
0000bf 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00A2             if (secend == 60)
0000c0 e3ec      	LDI  R30,LOW(60)
0000c1 e0f0      	LDI  R31,HIGH(60)
0000c2 17e2      	CP   R30,R18
0000c3 07f3      	CPC  R31,R19
0000c4 f431      	BRNE _0x7
                 ; 0000 00A3             {
                 ; 0000 00A4                   lcd_clear();
0000c5 940e 02a2 	CALL _lcd_clear
                 ; 0000 00A5                   minute++;
                +
0000c7 5f0f     +SUBI R16 , LOW ( - 1 )
0000c8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00A6                   secend = 0;
                +
0000c9 e020     +LDI R18 , LOW ( 0 )
0000ca e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 00A7             }
                 ; 0000 00A8       }
                 _0x7:
0000cb cfcd      	RJMP _0x3
                 ; 0000 00A9  }
                 _0x8:
0000cc cfff      	RJMP _0x8
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000160           	.BYTE 0x2
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000cd 93ba      	ST   -Y,R27
0000ce 93aa      	ST   -Y,R26
0000cf 931a      	ST   -Y,R17
0000d0 930a      	ST   -Y,R16
0000d1 81aa      	LDD  R26,Y+2
0000d2 81bb      	LDD  R27,Y+2+1
0000d3 9612      	ADIW R26,2
0000d4 940e 0380 	CALL __GETW1P
0000d6 9730      	SBIW R30,0
0000d7 f159      	BREQ _0x2000010
0000d8 81aa      	LDD  R26,Y+2
0000d9 81bb      	LDD  R27,Y+2+1
0000da 9614      	ADIW R26,4
0000db 940e 0380 	CALL __GETW1P
0000dd 018f      	MOVW R16,R30
0000de 9730      	SBIW R30,0
0000df f061      	BREQ _0x2000012
                +
0000e0 3002     +CPI R16 , LOW ( 2 )
0000e1 e0e0     +LDI R30 , HIGH ( 2 )
0000e2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000e3 f098      	BRLO _0x2000013
0000e4 01f8      	MOVW R30,R16
0000e5 9731      	SBIW R30,1
0000e6 018f      	MOVW R16,R30
                +
0000e7 81aa     +LDD R26 , Y + 2
0000e8 81bb     +LDD R27 , Y + 2 + 1
0000e9 9614     +ADIW R26 , 4
0000ea 93ed     +ST X + , R30
0000eb 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0000ec 81aa      	LDD  R26,Y+2
0000ed 81bb      	LDD  R27,Y+2+1
0000ee 9612      	ADIW R26,2
0000ef 91ed      	LD   R30,X+
0000f0 91fd      	LD   R31,X+
0000f1 9631      	ADIW R30,1
0000f2 93fe      	ST   -X,R31
0000f3 93ee      	ST   -X,R30
0000f4 9731      	SBIW R30,1
0000f5 81ac      	LDD  R26,Y+4
0000f6 83a0      	STD  Z+0,R26
                 _0x2000013:
0000f7 81aa      	LDD  R26,Y+2
0000f8 81bb      	LDD  R27,Y+2+1
0000f9 940e 0380 	CALL __GETW1P
0000fb 23ff      	TST  R31
0000fc f02a      	BRMI _0x2000014
0000fd 91ed      	LD   R30,X+
0000fe 91fd      	LD   R31,X+
0000ff 9631      	ADIW R30,1
000100 93fe      	ST   -X,R31
000101 93ee      	ST   -X,R30
                 _0x2000014:
000102 c006      	RJMP _0x2000015
                 _0x2000010:
000103 81aa      	LDD  R26,Y+2
000104 81bb      	LDD  R27,Y+2+1
000105 efef      	LDI  R30,LOW(65535)
000106 efff      	LDI  R31,HIGH(65535)
000107 93ed      	ST   X+,R30
000108 93fc      	ST   X,R31
                 _0x2000015:
000109 8119      	LDD  R17,Y+1
00010a 8108      	LDD  R16,Y+0
00010b 9625      	ADIW R28,5
00010c 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00010d 93ba      	ST   -Y,R27
00010e 93aa      	ST   -Y,R26
00010f 9726      	SBIW R28,6
000110 940e 038d 	CALL __SAVELOCR6
000112 e010      	LDI  R17,0
000113 85ac      	LDD  R26,Y+12
000114 85bd      	LDD  R27,Y+12+1
000115 e0e0      	LDI  R30,LOW(0)
000116 e0f0      	LDI  R31,HIGH(0)
000117 93ed      	ST   X+,R30
000118 93fc      	ST   X,R31
                 _0x2000016:
000119 89ea      	LDD  R30,Y+18
00011a 89fb      	LDD  R31,Y+18+1
00011b 9631      	ADIW R30,1
00011c 8bea      	STD  Y+18,R30
00011d 8bfb      	STD  Y+18+1,R31
00011e 9731      	SBIW R30,1
00011f 91e4      	LPM  R30,Z
000120 2f2e      	MOV  R18,R30
000121 30e0      	CPI  R30,0
000122 f409      	BRNE PC+2
000123 c115      	RJMP _0x2000018
000124 2fe1      	MOV  R30,R17
000125 30e0      	CPI  R30,0
000126 f439      	BRNE _0x200001C
000127 3225      	CPI  R18,37
000128 f411      	BRNE _0x200001D
000129 e011      	LDI  R17,LOW(1)
00012a c002      	RJMP _0x200001E
                 _0x200001D:
00012b 940e 032f 	CALL SUBOPT_0x3
                 _0x200001E:
00012d c10a      	RJMP _0x200001B
                 _0x200001C:
00012e 30e1      	CPI  R30,LOW(0x1)
00012f f4a9      	BRNE _0x200001F
000130 3225      	CPI  R18,37
000131 f419      	BRNE _0x2000020
000132 940e 032f 	CALL SUBOPT_0x3
000134 c102      	RJMP _0x20000CC
                 _0x2000020:
000135 e012      	LDI  R17,LOW(2)
000136 e040      	LDI  R20,LOW(0)
000137 e000      	LDI  R16,LOW(0)
000138 322d      	CPI  R18,45
000139 f411      	BRNE _0x2000021
00013a e001      	LDI  R16,LOW(1)
00013b c0fc      	RJMP _0x200001B
                 _0x2000021:
00013c 322b      	CPI  R18,43
00013d f411      	BRNE _0x2000022
00013e e24b      	LDI  R20,LOW(43)
00013f c0f8      	RJMP _0x200001B
                 _0x2000022:
000140 3220      	CPI  R18,32
000141 f411      	BRNE _0x2000023
000142 e240      	LDI  R20,LOW(32)
000143 c0f4      	RJMP _0x200001B
                 _0x2000023:
000144 c002      	RJMP _0x2000024
                 _0x200001F:
000145 30e2      	CPI  R30,LOW(0x2)
000146 f439      	BRNE _0x2000025
                 _0x2000024:
000147 e050      	LDI  R21,LOW(0)
000148 e013      	LDI  R17,LOW(3)
000149 3320      	CPI  R18,48
00014a f411      	BRNE _0x2000026
00014b 6800      	ORI  R16,LOW(128)
00014c c0eb      	RJMP _0x200001B
                 _0x2000026:
00014d c003      	RJMP _0x2000027
                 _0x2000025:
00014e 30e3      	CPI  R30,LOW(0x3)
00014f f009      	BREQ PC+2
000150 c0e7      	RJMP _0x200001B
                 _0x2000027:
000151 3320      	CPI  R18,48
000152 f010      	BRLO _0x200002A
000153 332a      	CPI  R18,58
000154 f008      	BRLO _0x200002B
                 _0x200002A:
000155 c007      	RJMP _0x2000029
                 _0x200002B:
000156 e0aa      	LDI  R26,LOW(10)
000157 9f5a      	MUL  R21,R26
000158 2d50      	MOV  R21,R0
000159 2fe2      	MOV  R30,R18
00015a 53e0      	SUBI R30,LOW(48)
00015b 0f5e      	ADD  R21,R30
00015c c0db      	RJMP _0x200001B
                 _0x2000029:
00015d 2fe2      	MOV  R30,R18
00015e 36e3      	CPI  R30,LOW(0x63)
00015f f449      	BRNE _0x200002F
000160 940e 0336 	CALL SUBOPT_0x4
000162 89e8      	LDD  R30,Y+16
000163 89f9      	LDD  R31,Y+16+1
000164 81a4      	LDD  R26,Z+4
000165 93aa      	ST   -Y,R26
000166 940e 033c 	CALL SUBOPT_0x5
000168 c0ce      	RJMP _0x2000030
                 _0x200002F:
000169 37e3      	CPI  R30,LOW(0x73)
00016a f441      	BRNE _0x2000032
00016b 940e 0336 	CALL SUBOPT_0x4
00016d 940e 0342 	CALL SUBOPT_0x6
00016f 940e 0302 	CALL _strlen
000171 2f1e      	MOV  R17,R30
000172 c00a      	RJMP _0x2000033
                 _0x2000032:
000173 37e0      	CPI  R30,LOW(0x70)
000174 f461      	BRNE _0x2000035
000175 940e 0336 	CALL SUBOPT_0x4
000177 940e 0342 	CALL SUBOPT_0x6
000179 940e 030e 	CALL _strlenf
00017b 2f1e      	MOV  R17,R30
00017c 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00017d 6002      	ORI  R16,LOW(2)
00017e 770f      	ANDI R16,LOW(127)
00017f e030      	LDI  R19,LOW(0)
000180 c034      	RJMP _0x2000036
                 _0x2000035:
000181 36e4      	CPI  R30,LOW(0x64)
000182 f011      	BREQ _0x2000039
000183 36e9      	CPI  R30,LOW(0x69)
000184 f411      	BRNE _0x200003A
                 _0x2000039:
000185 6004      	ORI  R16,LOW(4)
000186 c002      	RJMP _0x200003B
                 _0x200003A:
000187 37e5      	CPI  R30,LOW(0x75)
000188 f431      	BRNE _0x200003C
                 _0x200003B:
000189 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00018a e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00018b 83ee      	STD  Y+6,R30
00018c 83ff      	STD  Y+6+1,R31
00018d e015      	LDI  R17,LOW(5)
00018e c00c      	RJMP _0x200003D
                 _0x200003C:
00018f 35e8      	CPI  R30,LOW(0x58)
000190 f411      	BRNE _0x200003F
000191 6008      	ORI  R16,LOW(8)
000192 c003      	RJMP _0x2000040
                 _0x200003F:
000193 37e8      	CPI  R30,LOW(0x78)
000194 f009      	BREQ PC+2
000195 c0a1      	RJMP _0x2000071
                 _0x2000040:
000196 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000197 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000198 83ee      	STD  Y+6,R30
000199 83ff      	STD  Y+6+1,R31
00019a e014      	LDI  R17,LOW(4)
                 _0x200003D:
00019b ff02      	SBRS R16,2
00019c c014      	RJMP _0x2000042
00019d 940e 0336 	CALL SUBOPT_0x4
00019f 940e 034c 	CALL SUBOPT_0x7
0001a1 85ab      	LDD  R26,Y+11
0001a2 23aa      	TST  R26
0001a3 f43a      	BRPL _0x2000043
0001a4 85ea      	LDD  R30,Y+10
0001a5 85fb      	LDD  R31,Y+10+1
0001a6 940e 0377 	CALL __ANEGW1
0001a8 87ea      	STD  Y+10,R30
0001a9 87fb      	STD  Y+10+1,R31
0001aa e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001ab 3040      	CPI  R20,0
0001ac f011      	BREQ _0x2000044
0001ad 5f1f      	SUBI R17,-LOW(1)
0001ae c001      	RJMP _0x2000045
                 _0x2000044:
0001af 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001b0 c004      	RJMP _0x2000046
                 _0x2000042:
0001b1 940e 0336 	CALL SUBOPT_0x4
0001b3 940e 034c 	CALL SUBOPT_0x7
                 _0x2000046:
                 _0x2000036:
0001b5 fd00      	SBRC R16,0
0001b6 c011      	RJMP _0x2000047
                 _0x2000048:
0001b7 1715      	CP   R17,R21
0001b8 f478      	BRSH _0x200004A
0001b9 ff07      	SBRS R16,7
0001ba c008      	RJMP _0x200004B
0001bb ff02      	SBRS R16,2
0001bc c004      	RJMP _0x200004C
0001bd 7f0b      	ANDI R16,LOW(251)
0001be 2f24      	MOV  R18,R20
0001bf 5011      	SUBI R17,LOW(1)
0001c0 c001      	RJMP _0x200004D
                 _0x200004C:
0001c1 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001c2 c001      	RJMP _0x200004E
                 _0x200004B:
0001c3 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001c4 940e 032f 	CALL SUBOPT_0x3
0001c6 5051      	SUBI R21,LOW(1)
0001c7 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001c8 2f31      	MOV  R19,R17
0001c9 ff01      	SBRS R16,1
0001ca c017      	RJMP _0x200004F
                 _0x2000050:
0001cb 3030      	CPI  R19,0
0001cc f0a1      	BREQ _0x2000052
0001cd ff03      	SBRS R16,3
0001ce c006      	RJMP _0x2000053
0001cf 81ee      	LDD  R30,Y+6
0001d0 81ff      	LDD  R31,Y+6+1
0001d1 9125      	LPM  R18,Z+
0001d2 83ee      	STD  Y+6,R30
0001d3 83ff      	STD  Y+6+1,R31
0001d4 c005      	RJMP _0x2000054
                 _0x2000053:
0001d5 81ae      	LDD  R26,Y+6
0001d6 81bf      	LDD  R27,Y+6+1
0001d7 912d      	LD   R18,X+
0001d8 83ae      	STD  Y+6,R26
0001d9 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001da 940e 032f 	CALL SUBOPT_0x3
0001dc 3050      	CPI  R21,0
0001dd f009      	BREQ _0x2000055
0001de 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001df 5031      	SUBI R19,LOW(1)
0001e0 cfea      	RJMP _0x2000050
                 _0x2000052:
0001e1 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001e2 e320      	LDI  R18,LOW(48)
0001e3 81ee      	LDD  R30,Y+6
0001e4 81ff      	LDD  R31,Y+6+1
0001e5 940e 0384 	CALL __GETW1PF
0001e7 87e8      	STD  Y+8,R30
0001e8 87f9      	STD  Y+8+1,R31
0001e9 81ee      	LDD  R30,Y+6
0001ea 81ff      	LDD  R31,Y+6+1
0001eb 9632      	ADIW R30,2
0001ec 83ee      	STD  Y+6,R30
0001ed 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001ee 85e8      	LDD  R30,Y+8
0001ef 85f9      	LDD  R31,Y+8+1
0001f0 85aa      	LDD  R26,Y+10
0001f1 85bb      	LDD  R27,Y+10+1
0001f2 17ae      	CP   R26,R30
0001f3 07bf      	CPC  R27,R31
0001f4 f050      	BRLO _0x200005C
0001f5 5f2f      	SUBI R18,-LOW(1)
0001f6 85a8      	LDD  R26,Y+8
0001f7 85b9      	LDD  R27,Y+8+1
0001f8 85ea      	LDD  R30,Y+10
0001f9 85fb      	LDD  R31,Y+10+1
0001fa 1bea      	SUB  R30,R26
0001fb 0bfb      	SBC  R31,R27
0001fc 87ea      	STD  Y+10,R30
0001fd 87fb      	STD  Y+10+1,R31
0001fe cfef      	RJMP _0x200005A
                 _0x200005C:
0001ff 332a      	CPI  R18,58
000200 f028      	BRLO _0x200005D
000201 ff03      	SBRS R16,3
000202 c002      	RJMP _0x200005E
000203 5f29      	SUBI R18,-LOW(7)
000204 c001      	RJMP _0x200005F
                 _0x200005E:
000205 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000206 fd04      	SBRC R16,4
000207 c01a      	RJMP _0x2000061
000208 3321      	CPI  R18,49
000209 f420      	BRSH _0x2000063
00020a 85a8      	LDD  R26,Y+8
00020b 85b9      	LDD  R27,Y+8+1
00020c 9711      	SBIW R26,1
00020d f409      	BRNE _0x2000062
                 _0x2000063:
00020e c009      	RJMP _0x20000CD
                 _0x2000062:
00020f 1753      	CP   R21,R19
000210 f010      	BRLO _0x2000067
000211 ff00      	SBRS R16,0
000212 c001      	RJMP _0x2000068
                 _0x2000067:
000213 c013      	RJMP _0x2000066
                 _0x2000068:
000214 e220      	LDI  R18,LOW(32)
000215 ff07      	SBRS R16,7
000216 c00b      	RJMP _0x2000069
000217 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000218 6100      	ORI  R16,LOW(16)
000219 ff02      	SBRS R16,2
00021a c007      	RJMP _0x200006A
00021b 7f0b      	ANDI R16,LOW(251)
00021c 934a      	ST   -Y,R20
00021d 940e 033c 	CALL SUBOPT_0x5
00021f 3050      	CPI  R21,0
000220 f009      	BREQ _0x200006B
000221 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000222 940e 032f 	CALL SUBOPT_0x3
000224 3050      	CPI  R21,0
000225 f009      	BREQ _0x200006C
000226 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000227 5031      	SUBI R19,LOW(1)
000228 85a8      	LDD  R26,Y+8
000229 85b9      	LDD  R27,Y+8+1
00022a 9712      	SBIW R26,2
00022b f008      	BRLO _0x2000059
00022c cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00022d ff00      	SBRS R16,0
00022e c008      	RJMP _0x200006D
                 _0x200006E:
00022f 3050      	CPI  R21,0
000230 f031      	BREQ _0x2000070
000231 5051      	SUBI R21,LOW(1)
000232 e2e0      	LDI  R30,LOW(32)
000233 93ea      	ST   -Y,R30
000234 940e 033c 	CALL SUBOPT_0x5
000236 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000237 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000238 cee0      	RJMP _0x2000016
                 _0x2000018:
000239 85ac      	LDD  R26,Y+12
00023a 85bd      	LDD  R27,Y+12+1
00023b 940e 0380 	CALL __GETW1P
00023d 940e 0394 	CALL __LOADLOCR6
00023f 9664      	ADIW R28,20
000240 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000241 92ff      	PUSH R15
000242 2ef8      	MOV  R15,R24
000243 9726      	SBIW R28,6
000244 940e 038f 	CALL __SAVELOCR4
000246 940e 0354 	CALL SUBOPT_0x8
000248 9730      	SBIW R30,0
000249 f419      	BRNE _0x2000072
00024a efef      	LDI  R30,LOW(65535)
00024b efff      	LDI  R31,HIGH(65535)
00024c c023      	RJMP _0x2080002
                 _0x2000072:
00024d 01de      	MOVW R26,R28
00024e 9616      	ADIW R26,6
00024f 940e 0373 	CALL __ADDW2R15
000251 018d      	MOVW R16,R26
000252 940e 0354 	CALL SUBOPT_0x8
000254 83ee      	STD  Y+6,R30
000255 83ff      	STD  Y+6+1,R31
000256 e0e0      	LDI  R30,LOW(0)
000257 87e8      	STD  Y+8,R30
000258 87e9      	STD  Y+8+1,R30
000259 01de      	MOVW R26,R28
00025a 961a      	ADIW R26,10
00025b 940e 0373 	CALL __ADDW2R15
00025d 940e 0380 	CALL __GETW1P
00025f 93fa      	ST   -Y,R31
000260 93ea      	ST   -Y,R30
000261 931a      	ST   -Y,R17
000262 930a      	ST   -Y,R16
000263 eced      	LDI  R30,LOW(_put_buff_G100)
000264 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000265 93fa      	ST   -Y,R31
000266 93ea      	ST   -Y,R30
000267 01de      	MOVW R26,R28
000268 961a      	ADIW R26,10
000269 dea3      	RCALL __print_G100
00026a 019f      	MOVW R18,R30
00026b 81ae      	LDD  R26,Y+6
00026c 81bf      	LDD  R27,Y+6+1
00026d e0e0      	LDI  R30,LOW(0)
00026e 93ec      	ST   X,R30
00026f 01f9      	MOVW R30,R18
                 _0x2080002:
000270 940e 0396 	CALL __LOADLOCR4
000272 962a      	ADIW R28,10
000273 90ff      	POP  R15
000274 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000275 93aa      	ST   -Y,R26
000276 b3eb      	IN   R30,0x1B
000277 70ef      	ANDI R30,LOW(0xF)
000278 2fae      	MOV  R26,R30
000279 81e8      	LD   R30,Y
00027a 7fe0      	ANDI R30,LOW(0xF0)
00027b 2bea      	OR   R30,R26
00027c bbeb      	OUT  0x1B,R30
                +
00027d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00027e 958a     +DEC R24
00027f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000280 9ada      	SBI  0x1B,2
                +
000281 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000282 958a     +DEC R24
000283 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000284 98da      	CBI  0x1B,2
                +
000285 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000286 958a     +DEC R24
000287 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000288 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000289 93aa      	ST   -Y,R26
00028a 81a8      	LD   R26,Y
00028b dfe9      	RCALL __lcd_write_nibble_G101
00028c 81e8          ld    r30,y
00028d 95e2          swap  r30
00028e 83e8          st    y,r30
00028f 81a8      	LD   R26,Y
000290 dfe4      	RCALL __lcd_write_nibble_G101
                +
000291 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000292 958a     +DEC R24
000293 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000294 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000295 93aa      	ST   -Y,R26
000296 81e8      	LD   R30,Y
000297 e0f0      	LDI  R31,0
000298 59ee      	SUBI R30,LOW(-__base_y_G101)
000299 4ffe      	SBCI R31,HIGH(-__base_y_G101)
00029a 81e0      	LD   R30,Z
00029b 81a9      	LDD  R26,Y+1
00029c 0fae      	ADD  R26,R30
00029d dfeb      	RCALL __lcd_write_data
00029e 8059      	LDD  R5,Y+1
00029f 8048      	LDD  R4,Y+0
0002a0 9622      	ADIW R28,2
0002a1 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002a2 e0a2      	LDI  R26,LOW(2)
0002a3 940e 035b 	CALL SUBOPT_0x9
0002a5 e0ac      	LDI  R26,LOW(12)
0002a6 dfe2      	RCALL __lcd_write_data
0002a7 e0a1      	LDI  R26,LOW(1)
0002a8 940e 035b 	CALL SUBOPT_0x9
0002aa e0e0      	LDI  R30,LOW(0)
0002ab 2e4e      	MOV  R4,R30
0002ac 2e5e      	MOV  R5,R30
0002ad 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002ae 93aa      	ST   -Y,R26
0002af 81a8      	LD   R26,Y
0002b0 30aa      	CPI  R26,LOW(0xA)
0002b1 f011      	BREQ _0x2020005
0002b2 1457      	CP   R5,R7
0002b3 f048      	BRLO _0x2020004
                 _0x2020005:
0002b4 e0e0      	LDI  R30,LOW(0)
0002b5 93ea      	ST   -Y,R30
0002b6 9443      	INC  R4
0002b7 2da4      	MOV  R26,R4
0002b8 dfdc      	RCALL _lcd_gotoxy
0002b9 81a8      	LD   R26,Y
0002ba 30aa      	CPI  R26,LOW(0xA)
0002bb f409      	BRNE _0x2020007
0002bc c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002bd 9453      	INC  R5
0002be 9ad8      	SBI  0x1B,0
0002bf 81a8      	LD   R26,Y
0002c0 dfc8      	RCALL __lcd_write_data
0002c1 98d8      	CBI  0x1B,0
0002c2 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002c3 93ba      	ST   -Y,R27
0002c4 93aa      	ST   -Y,R26
0002c5 931a      	ST   -Y,R17
                 _0x2020008:
0002c6 81a9      	LDD  R26,Y+1
0002c7 81ba      	LDD  R27,Y+1+1
0002c8 91ed      	LD   R30,X+
0002c9 83a9      	STD  Y+1,R26
0002ca 83ba      	STD  Y+1+1,R27
0002cb 2f1e      	MOV  R17,R30
0002cc 30e0      	CPI  R30,0
0002cd f019      	BREQ _0x202000A
0002ce 2fa1      	MOV  R26,R17
0002cf dfde      	RCALL _lcd_putchar
0002d0 cff5      	RJMP _0x2020008
                 _0x202000A:
0002d1 8118      	LDD  R17,Y+0
0002d2 9623      	ADIW R28,3
0002d3 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002d4 93aa      	ST   -Y,R26
0002d5 b3ea      	IN   R30,0x1A
0002d6 6fe0      	ORI  R30,LOW(0xF0)
0002d7 bbea      	OUT  0x1A,R30
0002d8 9ad2      	SBI  0x1A,2
0002d9 9ad0      	SBI  0x1A,0
0002da 9ad1      	SBI  0x1A,1
0002db 98da      	CBI  0x1B,2
0002dc 98d8      	CBI  0x1B,0
0002dd 98d9      	CBI  0x1B,1
0002de 8078      	LDD  R7,Y+0
0002df 81e8      	LD   R30,Y
0002e0 58e0      	SUBI R30,-LOW(128)
                +
0002e1 93e0 0164+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002e3 81e8      	LD   R30,Y
0002e4 54e0      	SUBI R30,-LOW(192)
                +
0002e5 93e0 0165+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002e7 e1a4      	LDI  R26,LOW(20)
0002e8 e0b0      	LDI  R27,0
0002e9 940e 0369 	CALL _delay_ms
0002eb 940e 0361 	CALL SUBOPT_0xA
0002ed 940e 0361 	CALL SUBOPT_0xA
0002ef 940e 0361 	CALL SUBOPT_0xA
0002f1 e2a0      	LDI  R26,LOW(32)
0002f2 df82      	RCALL __lcd_write_nibble_G101
                +
0002f3 ec88     +LDI R24 , LOW ( 200 )
0002f4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002f5 9701     +SBIW R24 , 1
0002f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002f7 e2a8      	LDI  R26,LOW(40)
0002f8 df90      	RCALL __lcd_write_data
0002f9 e0a4      	LDI  R26,LOW(4)
0002fa df8e      	RCALL __lcd_write_data
0002fb e8a5      	LDI  R26,LOW(133)
0002fc df8c      	RCALL __lcd_write_data
0002fd e0a6      	LDI  R26,LOW(6)
0002fe df8a      	RCALL __lcd_write_data
0002ff dfa2      	RCALL _lcd_clear
                 _0x2080001:
000300 9621      	ADIW R28,1
000301 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000302 93ba      	ST   -Y,R27
000303 93aa      	ST   -Y,R26
000304 91a9          ld   r26,y+
000305 91b9          ld   r27,y+
000306 27ee          clr  r30
000307 27ff          clr  r31
                 strlen0:
000308 916d          ld   r22,x+
000309 2366          tst  r22
00030a f011          breq strlen1
00030b 9631          adiw r30,1
00030c cffb          rjmp strlen0
                 strlen1:
00030d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00030e 93ba      	ST   -Y,R27
00030f 93aa      	ST   -Y,R26
000310 27aa          clr  r26
000311 27bb          clr  r27
000312 91e9          ld   r30,y+
000313 91f9          ld   r31,y+
                 strlenf0:
000314 9005      	lpm  r0,z+
000315 2000          tst  r0
000316 f011          breq strlenf1
000317 9611          adiw r26,1
000318 cffb          rjmp strlenf0
                 strlenf1:
000319 01fd          movw r30,r26
00031a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000162           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00031b 93fa      	ST   -Y,R31
00031c 93ea      	ST   -Y,R30
                +
00031d e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00031e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00031f 93fa      	ST   -Y,R31
000320 93ea      	ST   -Y,R30
000321 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000322 940e 037b 	CALL __CWD1
000324 940e 0388 	CALL __PUTPARD1
000326 e084      	LDI  R24,4
000327 940e 0241 	CALL _sprintf
000329 9628      	ADIW R28,8
00032a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00032b 93ea      	ST   -Y,R30
00032c e0a0      	LDI  R26,LOW(0)
00032d 940c 0295 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00032f 932a      	ST   -Y,R18
000330 85ad      	LDD  R26,Y+13
000331 85be      	LDD  R27,Y+13+1
000332 85ef      	LDD  R30,Y+15
000333 89f8      	LDD  R31,Y+15+1
000334 9509      	ICALL
000335 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000336 89e8      	LDD  R30,Y+16
000337 89f9      	LDD  R31,Y+16+1
000338 9734      	SBIW R30,4
000339 8be8      	STD  Y+16,R30
00033a 8bf9      	STD  Y+16+1,R31
00033b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00033c 85ad      	LDD  R26,Y+13
00033d 85be      	LDD  R27,Y+13+1
00033e 85ef      	LDD  R30,Y+15
00033f 89f8      	LDD  R31,Y+15+1
000340 9509      	ICALL
000341 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
000342 89a8      	LDD  R26,Y+16
000343 89b9      	LDD  R27,Y+16+1
000344 9614      	ADIW R26,4
000345 940e 0380 	CALL __GETW1P
000347 83ee      	STD  Y+6,R30
000348 83ff      	STD  Y+6+1,R31
000349 81ae      	LDD  R26,Y+6
00034a 81bf      	LDD  R27,Y+6+1
00034b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
00034c 89a8      	LDD  R26,Y+16
00034d 89b9      	LDD  R27,Y+16+1
00034e 9614      	ADIW R26,4
00034f 940e 0380 	CALL __GETW1P
000351 87ea      	STD  Y+10,R30
000352 87fb      	STD  Y+10+1,R31
000353 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000354 01de      	MOVW R26,R28
000355 961c      	ADIW R26,12
000356 940e 0373 	CALL __ADDW2R15
000358 940e 0380 	CALL __GETW1P
00035a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00035b 940e 0289 	CALL __lcd_write_data
00035d e0a3      	LDI  R26,LOW(3)
00035e e0b0      	LDI  R27,0
00035f 940c 0369 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
000361 e3a0      	LDI  R26,LOW(48)
000362 940e 0275 	CALL __lcd_write_nibble_G101
                +
000364 ec88     +LDI R24 , LOW ( 200 )
000365 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000366 9701     +SBIW R24 , 1
000367 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000368 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000369 9610      	adiw r26,0
00036a f039      	breq __delay_ms1
                 __delay_ms0:
00036b 95a8      	wdr
                +
00036c ed80     +LDI R24 , LOW ( 0x7D0 )
00036d e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00036e 9701     +SBIW R24 , 1
00036f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000370 9711      	sbiw r26,1
000371 f7c9      	brne __delay_ms0
                 __delay_ms1:
000372 9508      	ret
                 
                 __ADDW2R15:
000373 2400      	CLR  R0
000374 0daf      	ADD  R26,R15
000375 1db0      	ADC  R27,R0
000376 9508      	RET
                 
                 __ANEGW1:
000377 95f1      	NEG  R31
000378 95e1      	NEG  R30
000379 40f0      	SBCI R31,0
00037a 9508      	RET
                 
                 __CWD1:
00037b 2f6f      	MOV  R22,R31
00037c 0f66      	ADD  R22,R22
00037d 0b66      	SBC  R22,R22
00037e 2f76      	MOV  R23,R22
00037f 9508      	RET
                 
                 __GETW1P:
000380 91ed      	LD   R30,X+
000381 91fc      	LD   R31,X
000382 9711      	SBIW R26,1
000383 9508      	RET
                 
                 __GETW1PF:
000384 9005      	LPM  R0,Z+
000385 91f4      	LPM  R31,Z
000386 2de0      	MOV  R30,R0
000387 9508      	RET
                 
                 __PUTPARD1:
000388 937a      	ST   -Y,R23
000389 936a      	ST   -Y,R22
00038a 93fa      	ST   -Y,R31
00038b 93ea      	ST   -Y,R30
00038c 9508      	RET
                 
                 __SAVELOCR6:
00038d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00038e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00038f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000390 932a      	ST   -Y,R18
                 __SAVELOCR2:
000391 931a      	ST   -Y,R17
000392 930a      	ST   -Y,R16
000393 9508      	RET
                 
                 __LOADLOCR6:
000394 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000395 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000396 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000397 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000398 8119      	LDD  R17,Y+1
000399 8108      	LD   R16,Y
00039a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  37 r17:  26 r18:  34 r19:  12 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   5 r26: 101 r27:  38 r28:  19 r29:   1 r30: 191 r31:  59 
x  :  23 y  : 166 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  62 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   3 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  24 ld    :  25 ldd   :  77 ldi   : 103 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  19 movw  :  20 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  37 pop   :   1 push  :   1 rcall :  14 ret   :  27 
reti  :   0 rjmp  :  59 rol   :   0 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  59 std   :  31 sts   :   2 sub   :   1 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000736   1806     40   1846   16384  11.3%
[.dseg] 0x000060 0x000166      0      6      6    1024   0.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
